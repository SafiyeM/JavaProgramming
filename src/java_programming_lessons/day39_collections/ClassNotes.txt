Java Programming Day39

Topics: Collections
			- List
			- Set

package name: day39_collections


Elements: 	5, 0, 10, 8, 25, 5, 0

List = [5, 0, 10, 8, 25, 5, 0]


Data Structures:
	Array
	Collection
	Map


Collection (I): size is dynamic, supports non-primitives ONLY

		1. List (I): Has Index Number, Allows Duplicate

				1.1 ArrayList: Array based class
							   Accessing/searching the elements are faster

				1.2 LinkedList: Node based class (doubly linked list)
								Insertion & deletion of elements are faster

				1.3 Vector: Same as ArrayList but synchronized
							Is Synchronized ==> Thread-safety

				1.3.1 Stack: Same as ArrayList but synchronized
							Last-In-First-Out (LIFO) ===> pop()


		2. Set (I): Does not have index number, Does not allow duplicates

				2.1 HashSet (C): Order is random, accepts null

				2.1.1 LinkedHashSet (C): Keeps the insertion order, accepts null

				2.2 TreeSet (C): keeps the sorted order, does not accept null



		3. Queue (I)


Synchronized: multiple threads are being executed one thread at a time

			advantage: thread-safety
			disadvantage: slower


Process: execution instance of program application

Thread: A sequence of execution within a process


Creating custom Thread in java:
		1. by inheriting Thread Class
		2. by inheriting Runnable Interface

Multi-threading:
	Multiple thread objects are executed at the same time (simultaneously)
	Within one process multiple threads are executing at the same time

Multitasking:
		Two or more process are running
		multi-threading operates within a single program, while multitasking operates at the system level, managing multiple programs or processes.


Multi-threading:
Let's say we have a computer program that needs to perform multiple tasks simultaneously.
For example, it might need to download a file from the internet while also displaying a progress bar to the user.
Without threads, the program would have to download the file first and then update the progress bar afterward.
This means the user would have to wait for the download to complete before seeing any progress.

Threads allow us to divide these tasks into separate units of work that can be executed concurrently.
So, in this case, we can create two threadsâ€”one for downloading the file and another for updating the progress bar.
Now, the download and the progress bar update can happen simultaneously, making the program more responsive.





