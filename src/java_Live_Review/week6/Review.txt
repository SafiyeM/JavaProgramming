03/19/2023

Week 6
Day15 - Loops Continue
Day16 - Loops Continue
Day17 - Class & Object Intro
__________________________________________________________________

branching statements
while loop
do while loop
nested loop
class & object
instance variables & methods
toString
this
__________________________________________________________________

branching statements

    break statement in loop:

        stops and exits the loop

    continue statement in loop:

        it will skip the rest of the iteration and goes to the update part.
        any code after a continue will not run for that iteration

System.exit(0): terminates the current program, terminates the JVM

__________________________________________________________________

while loop

	loop that will keep running if the given boolean is true

	Checks the boolean first, then runs the code statements, then checks the boolean from the start again. That cycle repeats

        while(boolean_expression){
            // statements
        }

        flow:
            boolean expression is checked
                if the boolean is true: the loop will run the next iteration, run statements. Then the boolean is checked again.

                if the boolean is false: the loop will stop
__________________________________________________________________

do while loop

    similar to the while loop but the first iteration/execution is always run at least one time and then the boolean value is checked. If the boolean is true the loop will iterate again and then boolean is checked again. That cycle repeats

    do{

        // statements

    } while(boolean_expression);

	while: used when the number of iterations is not known

	do while: used when the number of iterations is not known, but need one guaranteed execution

	for loop: used when the number of iterations is known

__________________________________________________________________

nested loop

	Loop inside of a loop

		- the nested loop can be any loop type, but we commonly use for loop
			for(int i = 0; i < 5; i++){
				for(int j=0; j < 2; j++){
					System.out.println(i + " " + j);
				}
			}

			The outer loop ( first loop using the i variable ) will execute for a total of 5 iterations

			The inner loop ( second loop, which inside of the other loop ) will execute for a total of 10.
				-> for each iteration of the outer loop the inner loop starts from the beginning and executes until the end
__________________________________________________________________

class & object

	What is a class?

	    a template/blueprint for objects

	    classes are made in java file and the public classes should match the java file name

	What is an object?

	    instances of your class, so it has access to the variables/ methods

	How to create an object?

	    ClassName referenceName = new ClassName();

	    instantiation: creating an object
	        in-stan-shi-ation

	What is an instance variable?

	    variables defined in a class. There variables belong to each object of the class

	    Every object has its own set of instance variables and instance methods
__________________________________________________________________

toString

	this method is called automatically when you print an object

	DONT WORRY ABOUT @OVERRIDE RIGHT NOW
__________________________________________________________________

this
	reference to the instance of the class

	this is mainly used to differentiate between local variables and instance variables

Java prioritizes local variables

    if there is a local variable and an instance variable that have the same name the local variable is the one used

- parameters in a methods are local variables
__________________________________________________________________

To debug

	create a breakpoint by clicking on the left bar next the line number (you should see a red dot)
	click the run button and select debug not just run
	click step over to execute the line one at a time
	click step into to go into the method code

	make sure program is terminated otherwise it will keep running
